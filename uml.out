@startuml
class PieceBoard {
  .. fields ..
  pub board: [Occupant; 64]
  tmp: ()
  .. methods ..
  From<BEN>::from(ben: BEN)
  From<&BEN>::from(ben: &BEN)
  From<FEN>::from(fen: FEN)
  From<&FEN>::from(fen: &FEN)
  Default::default()
  Query::get(&self, square: impl Into<Square>)
  Alter::alter(&self, alter: Alteration) 
}

class MoveGenerator {
  .. fields ..
  position: Position
  .. methods ..
  new(position: Position) 
}

class Hazel {
  .. fields ..
  flags: HashMap<String, bool>
  engine: ()
  mode: Mode
  tile: Tile
  .. methods ..
  new()
  input_widget(&self) 
}

class Stockfish {
  .. fields ..
  child: Child
  stdin: ChildStdin
  stdout: BufReader<ChildStdout>
  .. methods ..
  Default::default()
  new() 
}

class UCIOption {
  .. fields ..
  name: String
  option_type: String
  default: String
  min: String
  max: String
  var: Vec<String>
  .. methods ..
  new(name: String, option_type: String, default: String, min: String, max: String, var: Vec<String>)
  empty()
  parse(option: &str) 
}

class CastleRights {
  .. fields ..
  pub white_short: bool
  pub white_long: bool
  pub black_short: bool
  pub black_long: bool
  .. methods ..
  From<u8>::from(castling: u8)
  From<u32>::from(castling: u32)
  Arbitrary::arbitrary(g: &mut Gen) 
}

class Familiar {
  .. fields ..
  cursor: Cursor<'a, Action<Move, BEN>>
  movesheets: Vec<MoveSheet>
  .. methods ..
   
}

class ChessGame {
  .. fields ..
  pub rep: T
  pub metadata: PositionMetadata
  .. methods ..
   
}

class PositionMetadata {
  .. fields ..
  pub side_to_move: Color
  pub castling: CastleRights
  pub en_passant: Option<Square>
  pub halfmove_clock: u8
  pub fullmove_number: u16
  .. methods ..
  Default::default()
  From<u32>::from(data: u32)
  Arbitrary::arbitrary(g: &mut Gen) 
}

class Variation {
  .. fields ..
  log: Log<Action<Move, BEN>>
  halted: bool
  .. methods ..
  new()
  familiar(&mut self)
  current_position(&mut self) 
}

class BEN {
  .. fields ..
  position: [u8; 32]
  metadata: PositionMetadata
  .. methods ..
  From<ChessGame<T>>::from(game: ChessGame<T>)
  From<FEN>::from(fen: FEN)
  From<PieceBoard>::from(pb: PieceBoard)
  Query::get(&self, square: impl Into<Square>)
  Alter::alter(&self, alter: Alteration)
  new(pos: &str)
  empty()
  with_metadata(metadata: PositionMetadata)
  metadata(&self)
  side_to_move(&self) 
}

class FEN {
  .. fields ..
  fen: crate::notation::fen::FEN
  style: Style
  alignment: Alignment
  .. methods ..
  From<PieceBoard>::from(board: PieceBoard)
  From<ChessGame<T>>::from(game: ChessGame<T>)
  From<BEN>::from(ben: BEN)
  From<&BEN>::from(ben: &BEN)
  Query::get(&self, s: impl Into<Square>)
  Alter::alter(&self, alteration: Alteration)
  Default::default()
  start_position()
  position(&self)
  with_default_metadata(fen: &str)
  with_metadata(position: impl Into<Position>, metadata: PositionMetadata)
  new(fen: crate::notation::fen::FEN)
  side_to_move(&self)
  castling(&self)
  setup(&self)
  metadata(&self)
  From<&PieceBoard>::from(board: &PieceBoard)
  set_style(mut self, style: Style)
  alignment(mut self, alignment: Alignment)
  center(self) 
}

class Position {
  .. fields ..
  position_string: String
  position: Vec<Alteration>
  .. methods ..
  new(fen: &str)
  From<C>::from(c: C)
  Default::default() 
}

class PGN {
  .. fields ..
  tag_pairs: Vec<TagPair>
  variation: Variation
  .. methods ..
  familiar(&mut self)
  current_position(&self) 
}

class TagPair {
  .. fields ..
  pub(crate) name: String
  pub(crate) value: String
  .. methods ..
   
}

class SAN {
  .. fields ..
  source_piece: Option<Piece>
  captured_piece: Option<Piece>
  disambiguator: Option<Disambiguator>
  capturing: bool
  source_sq: Option<Square>
  target_sq: Option<Square>
  ambiguous_sq: Option<Square>
  promotion: Option<Piece>
  castle_short: bool
  castle_long: bool
  context: BEN
  .. methods ..
  new(fen: impl Into<BEN>) 
}

class RankIterator {
  .. fields ..
  rank: Option<usize>
  file: File
  direction: RankDirection
  .. methods ..
   
}

class RankFile {
  .. fields ..
  done: bool
  rank: usize
  file: usize
  rank_direction: RankDirection
  file_direction: FileDirection
  .. methods ..
  Default::default()
  From<Square>::from(square: Square)
  last_square(&self)
  current_square(&self) 
}

class UCI {
  .. fields ..
  source: Square
  target: Square
  promotion_piece: Option<Piece>
  metadata: MoveType
  .. methods ..
  From<Move>::from(mov: Move) 
}

class IndexIterator {
  .. fields ..
  source: Bitboard
  .. methods ..
   
}

class Cursor {
  .. fields ..
  log: &'a Log<T>
  position: Option<usize>
  .. methods ..
   
}

class Log {
  .. fields ..
  log: Vec<T>
  current_txn: Transaction<T>
  stack: Vec<Transaction<T>>
  write_head: usize
  .. methods ..
   
}

class Transaction {
  .. fields ..
  content: Vec<T>
  finished: bool
  .. methods ..
   
}

class WriteHead {
  .. fields ..
  log: &'a mut Log<T>
  position: usize
  .. methods ..
   
}

class MoveSheet {
  .. fields ..
  sheet: Vec<MoveSheetEntry>
  line: Vec<Move>
  initial_state: BEN
  .. methods ..
  new() 
}

class PEXTBoard {
  .. fields ..
  table: Box<[Bitboard; SIZE]>
  .. methods ..
   
}

class Witch {
  .. fields ..
  pub state: S
  inbox: mpsc::Receiver<MessageForWitch<BUF_SIZE, S, R>>
  sase: mpsc::Sender<MessageForWitch<BUF_SIZE, S, R>>
  outbox: broadcast::Sender<R>
  .. methods ..
   
}

class WitchHandle {
  .. fields ..
  inbox: mpsc::Sender<MessageForWitch<BUF_SIZE, S, R>>
  outbox: Arc<Mutex<broadcast::Receiver<R>>>
  .. methods ..
   
}

class Board {
  .. fields ..
  state: PieceBoard
  board: Table<'a>
  .. methods ..
   
}

class EngineIOSection {
  .. fields ..
  output: Output
  input: Input
  .. methods ..
   
}

class BoardSection {
  .. fields ..
  board_widget: Board<'a>
  .. methods ..
   
}

class InfoSection {
  .. fields ..
  pgn: PGNSection
  .. methods ..
  new(pgn: PGN) 
}

class PGNSection {
  .. fields ..
  current_position: usize
  pgn: PGN
  .. methods ..
  new(pgn: PGN) 
}

class GameSectionLayout {
  .. fields ..
  info_section: InfoSection
  board_section: BoardSection<'a>
  .. methods ..
   
}

class Input {
  .. fields ..
  content: String
  .. methods ..
  content(&self)
  flush(&mut self) 
}

class Output {
  .. fields ..
  buffer: Vec<String>
  .. methods ..
   
}

class Placeholder {
  .. fields ..
  width: u16
  height: u16
  borders: Borders
  text: &'static str
  style: Style
  .. methods ..
  of_size( width: u16, height: u16)
  borders(mut self, borders: Borders)
  text(mut self, text: &'static str)
  calculate_text(&self)
  set_style(mut self, style: Style) 
}

class SmallBoard {
  .. fields ..
  board: PieceBoard
  .. methods ..
  from(board: &PieceBoard) 
}

class Tile {
  .. fields ..
  engine_io_section: EngineIOSection
  state: PGN
  .. methods ..
  new()
  query_line(&self) 
}

class Charray {
  .. fields ..
  origin: Origin
  data: [[u8; W]; H]
  .. methods ..
   
}

class Mask {
  .. fields ..
  command: String
  pub stdin: ChildStdin
  pub stdout: ReceiverStream<String>
  pub stderr: ReceiverStream<String>
  .. methods ..
   
}

@enduml
