@startuml
class PieceBoard {
  .. fields ..
  
  .. methods ..
  From<BEN>::from(ben: BEN)
  From<&BEN>::from(ben: &BEN)
  From<FEN>::from(fen: FEN)
  From<&FEN>::from(fen: &FEN)
  Default::default()
  Query::get(&self, square: impl Into<Square>)
  Alter::alter(&self, alter: Alteration) 
}

class MoveGenerator {
  .. fields ..
  
  .. methods ..
  new(position: Position) 
}

class Move {
  .. fields ..
  
  .. methods ..
  generate(&ply: &Ply, color: Color)
  Debug::fmt(&self, f: &mut Formatter<'_>)
  Display::fmt(&self, f: &mut Formatter<'_>)
  empty()
  new(source: impl Into<Square>, target: impl Into<Square>, metadata: MoveType)
  null()
  from_notation(source: &str, target: &str, metadata: MoveType)
  to_pgn(&self, context: &C)
  long_castle(color: Color)
  short_castle(color: Color)
  source(&self)
  target(&self)
  promotion_piece(&self)
  move_metadata(&self)
  to_uci(&self)
  From<UCI>::from(uci: UCI) 
}

class Hazel {
  .. fields ..
  
  .. methods ..
  new()
  input_widget(&self) 
}

class Stockfish {
  .. fields ..
  
  .. methods ..
  Default::default()
  new() 
}

class UCIOption {
  .. fields ..
  
  .. methods ..
  new(name: String, option_type: String, default: String, min: String, max: String, var: Vec<String>)
  empty()
  parse(option: &str) 
}

class CastleRights {
  .. fields ..
  
  .. methods ..
  From<u8>::from(castling: u8)
  From<u32>::from(castling: u32)
  Arbitrary::arbitrary(g: &mut Gen) 
}

class Familiar {
  .. fields ..
  
  .. methods ..
   
}

class ChessGame {
  .. fields ..
  
  .. methods ..
   
}

class PositionMetadata {
  .. fields ..
  
  .. methods ..
  Default::default()
  From<u32>::from(data: u32)
  Arbitrary::arbitrary(g: &mut Gen) 
}

class Variation {
  .. fields ..
  
  .. methods ..
  new()
  familiar(&mut self)
  current_position(&mut self) 
}

class BEN {
  .. fields ..
  
  .. methods ..
  From<ChessGame<T>>::from(game: ChessGame<T>)
  From<FEN>::from(fen: FEN)
  From<PieceBoard>::from(pb: PieceBoard)
  Query::get(&self, square: impl Into<Square>)
  Alter::alter(&self, alter: Alteration)
  new(pos: &str)
  empty()
  with_metadata(metadata: PositionMetadata)
  metadata(&self)
  side_to_move(&self) 
}

class FEN {
  .. fields ..
  
  .. methods ..
  From<PieceBoard>::from(board: PieceBoard)
  From<ChessGame<T>>::from(game: ChessGame<T>)
  From<BEN>::from(ben: BEN)
  From<&BEN>::from(ben: &BEN)
  Query::get(&self, s: impl Into<Square>)
  Alter::alter(&self, alteration: Alteration)
  Default::default()
  start_position()
  position(&self)
  with_default_metadata(fen: &str)
  with_metadata(position: impl Into<Position>, metadata: PositionMetadata)
  new(fen: crate::notation::fen::FEN)
  side_to_move(&self)
  castling(&self)
  setup(&self)
  metadata(&self)
  From<&PieceBoard>::from(board: &PieceBoard)
  set_style(mut self, style: Style)
  alignment(mut self, alignment: Alignment)
  center(self) 
}

class Position {
  .. fields ..
  
  .. methods ..
  new(fen: &str)
  From<C>::from(c: C)
  Default::default() 
}

class PGN {
  .. fields ..
  
  .. methods ..
  familiar(&mut self)
  current_position(&self) 
}

class TagPairs {
  .. fields ..
  
  .. methods ..
   
}

class SAN {
  .. fields ..
  
  .. methods ..
  new(fen: impl Into<BEN>) 
}

class RankIterator {
  .. fields ..
  
  .. methods ..
   
}

class RankFile {
  .. fields ..
  
  .. methods ..
  Default::default()
  From<Square>::from(square: Square)
  last_square(&self)
  current_square(&self) 
}

class Square {
  .. fields ..
  
  .. methods ..
  From<(usize, usize)>::from(coords: (usize, usize))
  From<(u16, u16)>::from(coords: (u16, u16))
  From<(usize, File)>::from((rank, file): (usize, File))
  From<&Square>::from(square: &Square)
  by_rank_and_file()
  fenwise()
  along_rank(rank: usize)
  along_file(file: File)
  new(index: usize)
  set_rank(&mut self, rank: usize)
  set_file(&mut self, file: usize)
  Arbitrary::arbitrary(g: &mut Gen) 
}

class NonEdgeSquare {
  .. fields ..
  
  .. methods ..
  Arbitrary::arbitrary(g: &mut Gen) 
}

class UCI {
  .. fields ..
  
  .. methods ..
  From<Move>::from(mov: Move) 
}

class IndexIterator {
  .. fields ..
  
  .. methods ..
   
}

class Bitboard {
  .. fields ..
  
  .. methods ..
  Arbitrary::arbitrary(g: &mut Gen)
  Not::not(self)
  Mul::mul(self, rhs: Bitboard)
  Mul<u64>::mul(self, rhs: u64)
  empty()
  full()
  from_index(index: usize)
  Default::default()
  Debug::fmt(&self, f: &mut Formatter<'_>)
  Display::fmt(&self, f: &mut Formatter<'_>)
  From<usize>::from(u: usize)
  From<N>::from(n: N)
  From<u64>::from(b: u64)
  From<&str>::from(n: &str)
  shift(&self, d: Direction)
  shift_by(&self, d: Direction, amt: usize) 
}

class Cursor {
  .. fields ..
  
  .. methods ..
   
}

class Log {
  .. fields ..
  
  .. methods ..
   
}

class Transaction {
  .. fields ..
  
  .. methods ..
   
}

class WriteHead {
  .. fields ..
  
  .. methods ..
   
}

class MoveSheet {
  .. fields ..
  
  .. methods ..
  new() 
}

class PEXTBoard {
  .. fields ..
  
  .. methods ..
   
}

class Witch {
  .. fields ..
  
  .. methods ..
   
}

class TestMessage {
  .. fields ..
  
  .. methods ..
   
}

class WitchHandle {
  .. fields ..
  
  .. methods ..
   
}

class Board {
  .. fields ..
  
  .. methods ..
   
}

class EngineIOSection {
  .. fields ..
  
  .. methods ..
   
}

class BoardSection {
  .. fields ..
  
  .. methods ..
   
}

class InfoSection {
  .. fields ..
  
  .. methods ..
  new(pgn: PGN) 
}

class PGNSection {
  .. fields ..
  
  .. methods ..
  new(pgn: PGN) 
}

class GameSectionLayout {
  .. fields ..
  
  .. methods ..
   
}

class Input {
  .. fields ..
  
  .. methods ..
  content(&self)
  flush(&mut self) 
}

class Output {
  .. fields ..
  
  .. methods ..
   
}

class Placeholder {
  .. fields ..
  
  .. methods ..
  of_size( width: u16, height: u16)
  borders(mut self, borders: Borders)
  text(mut self, text: &'static str)
  calculate_text(&self)
  set_style(mut self, style: Style) 
}

class SmallBoard {
  .. fields ..
  
  .. methods ..
  from(board: &PieceBoard) 
}

class Tile {
  .. fields ..
  
  .. methods ..
  new()
  query_line(&self) 
}

class Charray {
  .. fields ..
  
  .. methods ..
   
}

class Mask {
  .. fields ..
  
  .. methods ..
   
}

enum File {
  .. fields ..
  
  .. methods ..
  From<u8>::from(value: u8)
  From<char>::from(value: char)
  to_bitboard(self)
  from_index(index: usize)
  Arbitrary::arbitrary(g: &mut Gen) 
}

enum PossibleMove {
  .. fields ..
  
  .. methods ..
   
}

enum MoveType {
  .. fields ..
  
  .. methods ..
  new(bits: u16)
  quiet()
  capture()
  short_castle()
  long_castle()
  null_move() 
}

enum State {
  .. fields ..
  
  .. methods ..
   
}

enum UCIMessage {
  .. fields ..
  
  .. methods ..
  parse(message: &str) 
}

enum Action {
  .. fields ..
  
  .. methods ..
   
}

enum Delim {
  .. fields ..
  
  .. methods ..
   
}

enum Reason {
  .. fields ..
  
  .. methods ..
   
}

enum Alteration {
  .. fields ..
  
  .. methods ..
  place(square: Square, occupant: Occupant)
  remove(square: Square, occupant: Occupant)
  tag(byte: u8)
  clear()
  inverse(&self) 
}

enum PGNToken {
  .. fields ..
  
  .. methods ..
   
}

enum Disambiguator {
  .. fields ..
  
  .. methods ..
  square(&self) 
}

enum CastleMove {
  .. fields ..
  
  .. methods ..
   
}

enum RankDirection {
  .. fields ..
  
  .. methods ..
   
}

enum Color {
  .. fields ..
  
  .. methods ..
  From<u8>::from(value: u8)
  pawn_direction(self)
  pawn_rank(self)
  promotion_rank(self)
  Arbitrary::arbitrary(g: &mut Gen) 
}

enum Direction {
  .. fields ..
  
  .. methods ..
   
}

enum MoveSheetEntry {
  .. fields ..
  
  .. methods ..
   
}

enum Occupant {
  .. fields ..
  
  .. methods ..
  From<u8>::from(value: u8)
  empty()
  white(piece: Piece)
  black(piece: Piece)
  white_king()
  white_queen()
  white_rook()
  white_bishop()
  white_knight()
  white_pawn()
  black_king()
  black_queen()
  black_rook()
  black_bishop()
  black_knight()
  black_pawn()
  rook(color: Color)
  knight(color: Color)
  bishop(color: Color)
  queen(color: Color)
  king(color: Color)
  pawn(color: Color)
  Arbitrary::arbitrary(g: &mut Gen) 
}

enum Piece {
  .. fields ..
  
  .. methods ..
  last_piece()
  From<u16>::from(v: u16)
  Arbitrary::arbitrary(g: &mut Gen) 
}

enum WitchError {
  .. fields ..
  
  .. methods ..
   
}

enum Command {
  .. fields ..
  
  .. methods ..
   
}

enum Mode {
  .. fields ..
  
  .. methods ..
   
}

enum Origin {
  .. fields ..
  
  .. methods ..
   
}

interface Engine {
  .. fields ..
  
  .. methods ..
   
}

interface Alter {
  .. fields ..
  
  .. methods ..
   
}

interface CompilesTo {
  .. fields ..
  
  .. methods ..
   
}

interface Play {
  .. fields ..
  
  .. methods ..
   
}

interface Query {
  .. fields ..
  
  .. methods ..
   
}

interface MessageFor {
  .. fields ..
  
  .. methods ..
   
}

@enduml
